feature7:
  back to django app to create PRODUCER in Products
  use cloud amqp [RMQaaS] to create base cluster 
  Create consumer in root folder [admin app]

  test:
    >docker-compose exec backend sh [admin]
    >python consumer.py
    
    send test events: feature7 "GET products"
    usually see this ERROR: pika.exceptions.ChannelWrongStateError: Channel is closed. - restart both docker
    
    """
      (env) shajith_ravi:admin/ (feature7-rmq✗) $ docker-compose exec backend sh                                                                                         [0:01:16]
      # python consumer.py
      Started Consuming....
      Received message in admin
      b'Hello from publish in Products'
      Received message in admin
      b'Hello from publish in Products'
      Received message in admin
      b'Hello from publish in Products'
      Received message in admin
      b'Hello from publish in Products'
    """

PART II:
  Add consumer for main app.

  exec to main container
  (env) shajith_ravi:main/ (feature7-rmq✗) $ docker-compose exec backend sh                                                                                          [0:07:56]
  # python consumer.py
  Started Consuming on main....


  Update PRODUCER to pusblish to main queue.
  send test events: feature7 "GET products"

  """
    (env) shajith_ravi:main/ (feature7-rmq✗) $ docker-compose exec backend sh                                                                                          [0:07:56]
    # python consumer.py
    Started Consuming on main....
    Received message in main
    b'Hello from publish in Products'
    Received message in main
    b'Hello from publish in Products'
  """

PART III:
  Update dockerfile and compose to build queue containers with all needed consumer commands
  >docker-compose up -d db [shows db logs on console]

  """"
    queue_1    | Started Consuming on main....
    queue_1    | Received message in main
    queue_1    | b'Hello from publish in Products'
    queue_1    | Received message in main
    queue_1    | b'Hello from publish in Products'
  """

  send test events: feature7 "GET products" [see consuming eents on flask app only]


  PART IV:
    Add auto_ack=True so we dont se messages just being published and not auto_consumed.
    You will see docker come up with default print: "Started consuming" - but no backlogged messages.

    """"
    queue_1    | Started Consuming on main....
    """" 
    queue_1    | Started Consuming on admin....
    """"

    on rmq portal: ready and total will be 0